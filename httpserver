import argparse
import requests
import socket

class Cache:
    def __init__(self):
        self.cache = {}

    '''
        Return cached content. If the key is not present, it should add it to the cache.
    '''
    def get(self, key):
        return self.cache.get(key)

    '''
        Add content to the cache by the key which is the path, the value is a tuple
        of (content, time entered)
    '''
    def set(self, key, value):
        self.cache[key] = (value, time.time())

    def delete(self, ttl):
        current_time = time.time()
        # Find the entries that have expired
        to_remove = []
        for key, (value, time_entered) in self.cache.items():
            if current_time - time_entered > ttl:
                to_remove.append(key) # we want to remove the expired entry
        
        for key in to_remove: # Actually remove the entries in theb cahce
            del self.cache[key]

class HTTPServer:
    def __init__(self, port, origin_server):
        self.port = port
        self.origin_server = origin_server
        self.cache = Cache()
        self.ttl = 300

    def handle_request(self, client_request):
        if client_request == "/grading/beacon":
            return 204, ""
        
        # content from stored path in the cache
        cached_response = self.cache.get(client_request)

       
        if cached_response: # If there is something cached return the cached info
            return 200, cached_response
        else: # Or grab it from the origin server 
            origin_url = f"http://{self.origin_server}:8080{client_request}"
            response = requests.get(origin_url)
            if response.status_code == 200:
                # Add fetched content to our cache
                self.cache.set(client_request, response.text)
                return 200, response.text # Return the content that we got from the origin server
            else:
                return 404, "Not Found"

    def run(self):
        self.cleanup()
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
            server_socket.bind(('0.0.0.0', self.port))
            server_socket.listen(5)
            print(f"Listening on {self.port}...")
            while True:
                client_socket, address = server_socket.accept()
                request_data = client_socket.recv(1024).decode('utf-8')
                # Recieve client request
                request_lines = request_data.split('\n')
                if request_lines:
                    client_request = request_lines[0].split()[1] # Extract the path 

                    ##check if the path is stored in our cache
                    # if it is not stored, handle request will get it from the origin server
                    status_code, response_body = self.handle_request(client_request) 
                    response = f"HTTP/1.1 {status_code}\r\nContent-Length: {len(response_body)}\r\n\r\n{response_body}"
                    client_socket.sendall(response.encode('utf-8')) # send the content back to the client
                client_socket.close()
    
    def cleanup(self):
        self.cache.evict(self.ttl)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTP Server for CDN")
    parser.add_argument("-p", "--port", type=int, required=True, help="Port for HTTP server to bind to")
    parser.add_argument("-o", "--origin", type=str, required=True, help="Name of the origin server for the CDN")
    args = parser.parse_args()

    http_server = HTTPServer(args.port, args.origin)
    http_server.run()