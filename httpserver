#!/usr/bin/env python3

import argparse
import requests
import socket
import time

class Cache:
    def __init__(self):
        self.cache = {}  # {key: (value, time entered, num requests)}

    def get(self, key):
        cached_item = self.cache.get(key)
        if cached_item:
            # Increment request count safely here
            content, time_entered, count = cached_item
            self.cache[key] = (content, time_entered, count + 1)
            return cached_item
        return None

    def set(self, key, value):
        self.cache[key] = (value, time.time(), 1)

    def delete(self, ttl):
        current_time = time.time()
        to_remove = [key for key, (_, time_entered, _) in self.cache.items() if current_time - time_entered > ttl]
        for key in to_remove:
            del self.cache[key]

class HTTPServer:
    def __init__(self, port, origin_server):
        self.port = port
        self.origin_server = origin_server
        self.cache = Cache()
        self.ttl = 300

    def handle_request(self, client_request):
        if client_request == "/grading/beacon":
            return 204, ""
        
        cached_response = self.cache.get(client_request)
        if cached_response:
            _, content, _ = cached_response  # Extract content from the cached response tuple
            return 200, content
        else:
            origin_url = f"{self.origin_server}{client_request}"
            response = requests.get(origin_url)
            if response.status_code == 200:
                self.cache.set(client_request, response.text)
                return 200, response.text
            else:
                return 404, "Not Found"
            
    def run(self):
        self.cleanup()
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_socket.bind(('0.0.0.0', self.port))
            server_socket.listen(5)
            print(f"Listening on {self.port}...")
            while True:
                client_socket, _ = server_socket.accept()
                headers = ""
                while True:
                    part = client_socket.recv(4096).decode('utf-8')
                    headers += part
                    if "\r\n\r\n" in headers:  # End of headers
                        break

                # Extract the request line and headers
                request_line, headers_body = headers.split('\r\n', 1)
                headers_dict = {line.split(": ")[0]: line.split(": ")[1] for line in headers_body.split('\r\n')[:-2]}
                method, path, _ = request_line.split(' ')
                
                # Initialize response variables
                status_code = 200
                response_body = ""
                print(path)
                # For a GET request, attempt to retrieve the content
                status_code, response_body = self.handle_request(path)
    
                # Generate the response headers
                response_headers = f"HTTP/1.1 {status_code}\r\nContent-Length: {len(response_body.encode('utf-8'))}\r\n\r\n"
                
                # Send the response
                client_socket.sendall(response_headers.encode('utf-8') + response_body.encode('utf-8'))
                client_socket.close()


    def cleanup(self):
        self.cache.delete(self.ttl)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTP Server for CDN")
    parser.add_argument("-p", "--port", type=int, required=True, help="Port for HTTP server to bind to")
    parser.add_argument("-o", "--origin", type=str, required=True, help="Name of the origin server for the CDN")
    args = parser.parse_args()

    http_server = HTTPServer(args.port, args.origin)
    http_server.run()
