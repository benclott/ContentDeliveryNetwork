#!/bin/bash

#Initialize the values for each input 
port=""
origin=""
name=""
username=""
keyfile=""

#Create and parse the command line argumnets <- similar to argparse 

while getopts ":p:o:n:u:i:" opt; do #Each designates a command line argument flag it will read through the next of
    case ${opt} in #Depending on the opt 
    p )
        port=$OPTARG
        ;;
    o )
        origin=$OPTARG
        ;;
    n )
        name=$OPTARG
        ;;
    u )
        username=$OPTARG
        ;;
    i )
        keyfile=$OPTARG
        ;;
    \? )
        echo "Not an option: $OPTARG" 1>&2 #Tell the terminal this option isnt accepted and direct to stdout (2)
        ;;
    : )
        echo "No input found: $OPTARG" 1>&2
        ;;
    esac
done

shift $((OPTIND -1)) #Rests if extra parameters shouldn't be the case though

echo "Running CDN with the following information: PORT: $port, Origin $origin, Name: $name, User: $username"

#Deploy the dns server
echo $name
ssh -i "$keyfile" "$username@cdn-dns.khoury.northeastern.edu" "./dnsserver -p $port -n $name > /dev/null 2>&1 &" #Redirect stdin and out so that we can keep going 

# Check if SSH command was successful
if [ $? -eq 0 ]; then
    echo "dns server run successful."
else
    echo "dns startup failed." >&2
fi

servers=(  
    'cdn-http3.khoury.northeastern.edu'
    'cdn-http16.khoury.northeastern.edu'
    'cdn-http15.khoury.northeastern.edu'
    'cdn-http7.khoury.northeastern.edu'
    'cdn-http4.khoury.northeastern.edu'
    'cdn-http11.khoury.northeastern.edu')
for server in "${servers[@]}"; do
    echo "Running Servers"
    ssh -i "$keyfile" "$username@$server" "./httpserver -p $port -o $origin > /dev/null 2>&1 &"  #Idc why it failed


    if [ $? -eq 0 ]; then #Check if it worked or not by looking at the  return value of ssh, which is nonzero on failure
    echo "Run successful on server: $server"
else
    echo "Run failed on Server: $server" >&2
fi
done